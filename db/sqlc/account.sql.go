// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  user_name,password_hash 
) VALUES (
  $1, $2)
  RETURNING id, user_name, password_hash, created_at
`

type CreateAccountParams struct {
	UserName     sql.NullString `json:"user_name"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.UserName, arg.PasswordHash)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts 
where id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_name, password_hash, created_at FROM accounts
where id = $1  limit 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsByID = `-- name: GetCommentsByID :many
select id, content, reviewers_id, commented_id, created_at from comments c where c.reviewers_id = $1
`

func (q *Queries) GetCommentsByID(ctx context.Context, reviewersID sql.NullInt32) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByID, reviewersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ReviewersID,
			&i.CommentedID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUploadPeopleList = `-- name: GetUploadPeopleList :many
select user_name , p.name as  people_name from accounts a  inner join  peoples p on a.id = p.reviewers_id group by p.name
`

type GetUploadPeopleListRow struct {
	UserName   sql.NullString `json:"user_name"`
	PeopleName sql.NullString `json:"people_name"`
}

func (q *Queries) GetUploadPeopleList(ctx context.Context) ([]GetUploadPeopleListRow, error) {
	rows, err := q.db.QueryContext(ctx, getUploadPeopleList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUploadPeopleListRow
	for rows.Next() {
		var i GetUploadPeopleListRow
		if err := rows.Scan(&i.UserName, &i.PeopleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
update accounts set user_name=$1 ,password_hash=$2 where id = $3 RETURNING id, user_name, password_hash, created_at
`

type UpdateAccountParams struct {
	UserName     sql.NullString `json:"user_name"`
	PasswordHash sql.NullString `json:"password_hash"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.UserName, arg.PasswordHash, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}
